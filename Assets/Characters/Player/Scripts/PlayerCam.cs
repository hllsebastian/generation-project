//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Characters/Player/Scripts/PlayerCam.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerCam: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerCam()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerCam"",
    ""maps"": [
        {
            ""name"": ""Playercinem"",
            ""id"": ""a3a5bbb7-9213-4f41-aa04-196764f5bc3b"",
            ""actions"": [
                {
                    ""name"": ""look"",
                    ""type"": ""Value"",
                    ""id"": ""cd9cd8ca-1be6-4e4f-96dd-de4ce52c1511"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""8d8ef33a-f87d-455b-8900-e0a04f2034fd"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""edc1c2fb-c174-4a7d-bb34-379f55aa45ec"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Action"",
                    ""type"": ""Value"",
                    ""id"": ""a83c4197-e13e-4c6f-a6cb-cdd4a7e937b1"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""bd96b2a7-0a98-4b55-9146-5541605ab223"",
                    ""path"": ""<Gamepad>/rightStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""look"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""237fbd06-2069-44aa-9dec-6de1d0ed9273"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""WASD"",
                    ""id"": ""83d8da8e-4f2f-4057-b018-6885e290fe40"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""75eefa5b-3abe-4f1a-bcc7-d8b53cafb254"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""d7e22d8b-a22f-4e26-a378-b3295094c841"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""9f87a455-10f0-4074-acba-8cc19b4bc796"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""cd03b0e0-3ede-4cb6-96b3-d2434692f43c"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""62d29851-4489-47ce-9a31-8f9873c82088"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""fc72e7ad-27fe-4b61-81be-980306c5af20"",
                    ""path"": ""<Gamepad>/rightStickPress"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Action"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5d25d6e6-e212-4e57-b47f-11977aa3435a"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Action"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Playercinem
        m_Playercinem = asset.FindActionMap("Playercinem", throwIfNotFound: true);
        m_Playercinem_look = m_Playercinem.FindAction("look", throwIfNotFound: true);
        m_Playercinem_Move = m_Playercinem.FindAction("Move", throwIfNotFound: true);
        m_Playercinem_Jump = m_Playercinem.FindAction("Jump", throwIfNotFound: true);
        m_Playercinem_Action = m_Playercinem.FindAction("Action", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Playercinem
    private readonly InputActionMap m_Playercinem;
    private List<IPlayercinemActions> m_PlayercinemActionsCallbackInterfaces = new List<IPlayercinemActions>();
    private readonly InputAction m_Playercinem_look;
    private readonly InputAction m_Playercinem_Move;
    private readonly InputAction m_Playercinem_Jump;
    private readonly InputAction m_Playercinem_Action;
    public struct PlayercinemActions
    {
        private @PlayerCam m_Wrapper;
        public PlayercinemActions(@PlayerCam wrapper) { m_Wrapper = wrapper; }
        public InputAction @look => m_Wrapper.m_Playercinem_look;
        public InputAction @Move => m_Wrapper.m_Playercinem_Move;
        public InputAction @Jump => m_Wrapper.m_Playercinem_Jump;
        public InputAction @Action => m_Wrapper.m_Playercinem_Action;
        public InputActionMap Get() { return m_Wrapper.m_Playercinem; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayercinemActions set) { return set.Get(); }
        public void AddCallbacks(IPlayercinemActions instance)
        {
            if (instance == null || m_Wrapper.m_PlayercinemActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlayercinemActionsCallbackInterfaces.Add(instance);
            @look.started += instance.OnLook;
            @look.performed += instance.OnLook;
            @look.canceled += instance.OnLook;
            @Move.started += instance.OnMove;
            @Move.performed += instance.OnMove;
            @Move.canceled += instance.OnMove;
            @Jump.started += instance.OnJump;
            @Jump.performed += instance.OnJump;
            @Jump.canceled += instance.OnJump;
            @Action.started += instance.OnAction;
            @Action.performed += instance.OnAction;
            @Action.canceled += instance.OnAction;
        }

        private void UnregisterCallbacks(IPlayercinemActions instance)
        {
            @look.started -= instance.OnLook;
            @look.performed -= instance.OnLook;
            @look.canceled -= instance.OnLook;
            @Move.started -= instance.OnMove;
            @Move.performed -= instance.OnMove;
            @Move.canceled -= instance.OnMove;
            @Jump.started -= instance.OnJump;
            @Jump.performed -= instance.OnJump;
            @Jump.canceled -= instance.OnJump;
            @Action.started -= instance.OnAction;
            @Action.performed -= instance.OnAction;
            @Action.canceled -= instance.OnAction;
        }

        public void RemoveCallbacks(IPlayercinemActions instance)
        {
            if (m_Wrapper.m_PlayercinemActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayercinemActions instance)
        {
            foreach (var item in m_Wrapper.m_PlayercinemActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlayercinemActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PlayercinemActions @Playercinem => new PlayercinemActions(this);
    public interface IPlayercinemActions
    {
        void OnLook(InputAction.CallbackContext context);
        void OnMove(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
        void OnAction(InputAction.CallbackContext context);
    }
}
